# Exerc√≠cios de Estruturas de Repeti√ß√£o - While

Esta pasta cont√©m uma cole√ß√£o de exerc√≠cios pr√°ticos em Python utilizando o la√ßo `while`. Cada arquivo aborda um desafio diferente para treinar l√≥gica, repeti√ß√£o e intera√ß√£o com o usu√°rio.

## Como executar

1. Certifique-se de ter o Python instalado.
2. Navegue at√© a pasta `While` no terminal.
3. Execute o arquivo desejado com:
   ```
   python respostas/nome_do_arquivo.py
   ```
   Siga as instru√ß√µes exibidas no terminal.

---

## Descri√ß√£o dos Exerc√≠cios

### 1. **calculadora_economia_objetivo.py**
- **Objetivo:** Calcule em quantos meses voc√™ consegue juntar um valor desejado, economizando uma quantia fixa por m√™s.
- **O que fazer:** O aluno deve pedir ao usu√°rio o valor do objetivo e quanto pode guardar por m√™s. O programa mostra m√™s a m√™s o valor acumulado at√© atingir a meta.

### 2. **contador_de_habitos.py**
- **Objetivo:** Ajude o usu√°rio a acompanhar a repeti√ß√£o de um h√°bito at√© atingir uma meta.
- **O que fazer:** Solicite o nome do h√°bito e a quantidade de vezes que deseja completar. A cada confirma√ß√£o, incremente o contador e mostre o progresso.

### 3. **contador_palavras_texto.py**
- **Objetivo:** Conte quantas palavras existem em um texto fornecido pelo usu√°rio.
- **O que fazer:** Pe√ßa um texto ao usu√°rio e exiba o total de palavras.

### 4. **gerador_senhas_fortes.py**
- **Objetivo:** Gere senhas seguras personalizadas.
- **O que fazer:** Permita ao usu√°rio escolher o tamanho da senha e se deseja incluir letras, n√∫meros e s√≠mbolos. Gere e mostre a senha.

### 5. **jogo_da_forca.py**
- **Objetivo:** Implemente o cl√°ssico jogo da forca.
- **O que fazer:** Sorteie uma palavra secreta. O usu√°rio deve tentar adivinhar as letras, com n√∫mero limitado de tentativas. Mostre o progresso e informe vit√≥ria ou derrota.

### 6. **organizador_lista_compras.py**
- **Objetivo:** Crie um organizador de lista de compras interativo.
- **O que fazer:** Permita adicionar itens √† lista, visualizar e remover itens antes de finalizar. Ao final, mostre a lista completa.

### 7. **simulador_academia.py**
- **Objetivo:** Simule uma rotina de exerc√≠cios de academia.
- **O que fazer:** Mostre uma lista de exerc√≠cios e repeti√ß√µes. O aluno pode adaptar para pedir ao usu√°rio marcar cada exerc√≠cio como feito.

### 8. **simulador_caixa_eletronico.py**
- **Objetivo:** Simule um caixa eletr√¥nico que entrega c√©dulas para um saque.
- **O que fazer:** Pe√ßa o valor do saque e calcule quantas c√©dulas de cada valor ser√£o entregues, considerando o limite de notas dispon√≠veis.

### 9. **simulador_loteria.py**
- **Objetivo:** Simule um sorteio de loteria.
- **O que fazer:** O usu√°rio escolhe 6 n√∫meros entre 1 e 60. O programa sorteia 6 n√∫meros aleat√≥rios e informa quantos o usu√°rio acertou, mostrando pr√™mios simb√≥licos.

### 10. **temporizador_contagem_regressiva.py**
- **Objetivo:** Crie um temporizador de contagem regressiva.
- **O que fazer:** Pe√ßa ao usu√°rio um tempo em segundos e fa√ßa a contagem at√© zero, mostrando o tempo restante.

---

## Dicas Gerais

- Leia atentamente o enunciado de cada exerc√≠cio (coment√°rios no in√≠cio dos arquivos).
- Teste diferentes entradas para garantir que o programa funciona corretamente.
- Use valida√ß√£o de entrada sempre que poss√≠vel (ex: n√∫meros positivos, op√ß√µes v√°lidas).
- Se quiser, personalize as mensagens e adicione melhorias!

---

Bons estudos e pratique bastante! üöÄ